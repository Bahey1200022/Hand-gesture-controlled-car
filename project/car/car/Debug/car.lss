
car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e20  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ac  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005fd  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000418  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ff  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002d63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  78:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pwm_init>:
}

void pwm_init(void){
	///datasheet
	
	TCCR2A |=(1<<COM2B1) |(1<< WGM21) |(1<<WGM20) ; ///OC2B FAST PWM;
  80:	e0 eb       	ldi	r30, 0xB0	; 176
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	83 62       	ori	r24, 0x23	; 35
  88:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20) | (1<<WGM22);//no prescaler and wgm2
  8a:	e1 eb       	ldi	r30, 0xB1	; 177
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	89 60       	ori	r24, 0x09	; 9
  92:	80 83       	st	Z, r24
	
	OCR2A=800; //frequency
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B=100; //duty cycle 0->255
  9a:	84 e6       	ldi	r24, 0x64	; 100
  9c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  a0:	08 95       	ret

000000a2 <LCD_cmd>:

//*****sending command on LCD******//

void LCD_cmd(unsigned char cmd)
{
	LCD_DATA = cmd; // data lines are set to send command
  a2:	85 b9       	out	0x05, r24	; 5
	
	PORTD &= ~(1 << rs); // RS sets 0, for command data
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	8f 7e       	andi	r24, 0xEF	; 239
  a8:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << rw); // RW sets 0, to write data
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	8f 7b       	andi	r24, 0xBF	; 191
  ae:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << en); // make enable from high to low
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	87 ea       	ldi	r24, 0xA7	; 167
  b8:	91 e6       	ldi	r25, 0x61	; 97
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <LCD_cmd+0x18>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <LCD_cmd+0x1e>
  c0:	00 00       	nop
	
	_delay_ms(100);
	PORTD &= ~(1 << en); // make enable low
  c2:	8b b1       	in	r24, 0x0b	; 11
  c4:	8f 77       	andi	r24, 0x7F	; 127
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	08 95       	ret

000000ca <init_LCD>:



void init_LCD(void)
{
	LCD_cmd(0x38); // initialization in 8bit mode of 16X2 LCD
  ca:	88 e3       	ldi	r24, 0x38	; 56
  cc:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
  d0:	89 ef       	ldi	r24, 0xF9	; 249
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <init_LCD+0xa>
  d8:	00 c0       	rjmp	.+0      	; 0xda <init_LCD+0x10>
  da:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x01); // make clear LCD
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <init_LCD+0x1c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <init_LCD+0x22>
  ec:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x02); // return home
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <init_LCD+0x2e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <init_LCD+0x34>
  fe:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x06); // make increment in cursor
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
 106:	89 ef       	ldi	r24, 0xF9	; 249
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <init_LCD+0x40>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <init_LCD+0x46>
 110:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x80); // "8" go to first line and "0" is for 0th position
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
 118:	89 ef       	ldi	r24, 0xF9	; 249
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <init_LCD+0x52>
 120:	00 c0       	rjmp	.+0      	; 0x122 <init_LCD+0x58>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <LCD_write>:

//******write data on LCD******//

void LCD_write(unsigned char data)
{
	LCD_DATA = data; // data lines are set to send command
 126:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << rs); // RS sets 1, for command data
 128:	8b b1       	in	r24, 0x0b	; 11
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << rw); // RW sets 0, to write data
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 7b       	andi	r24, 0xBF	; 191
 132:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << en); // make enable from high to low
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	80 68       	ori	r24, 0x80	; 128
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	83 ef       	ldi	r24, 0xF3	; 243
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_write+0x18>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_write+0x1e>
 144:	00 00       	nop

	_delay_ms(2);
	PORTD &= ~(1 << en); // make enable low
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	8f 77       	andi	r24, 0x7F	; 127
 14a:	8b b9       	out	0x0b, r24	; 11
 14c:	08 95       	ret

0000014e <Cursor_pos>:


void Cursor_pos(unsigned char x_pos, unsigned char y_pos) //x awel aw tani row (0->1) el y column (0->15)
{
	uint8_t the_address=0;
	if (x_pos==0)
 14e:	88 23       	and	r24, r24
 150:	21 f0       	breq	.+8      	; 0x15a <Cursor_pos+0xc>
	the_address=0x80;
	else if(x_pos==1)
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	21 f0       	breq	.+8      	; 0x15e <Cursor_pos+0x10>



void Cursor_pos(unsigned char x_pos, unsigned char y_pos) //x awel aw tani row (0->1) el y column (0->15)
{
	uint8_t the_address=0;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	03 c0       	rjmp	.+6      	; 0x160 <Cursor_pos+0x12>
	if (x_pos==0)
	the_address=0x80;
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	01 c0       	rjmp	.+2      	; 0x160 <Cursor_pos+0x12>
	else if(x_pos==1)
	the_address=0xC0;
 15e:	80 ec       	ldi	r24, 0xC0	; 192
	if(y_pos<16)
 160:	60 31       	cpi	r22, 0x10	; 16
 162:	08 f4       	brcc	.+2      	; 0x166 <Cursor_pos+0x18>
	the_address+=y_pos;
 164:	86 0f       	add	r24, r22
	LCD_cmd(the_address);
 166:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
 16a:	08 95       	ret

0000016c <main>:



void pwm_init(void);
int main(void)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <main+0x6>
 172:	00 d0       	rcall	.+0      	; 0x174 <main+0x8>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
	DDRC |= (1<<DDC0) | (1<<DDC1); // outputs for motor driver
 178:	87 b1       	in	r24, 0x07	; 7
 17a:	83 60       	ori	r24, 0x03	; 3
 17c:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF; // set LCD data port as output
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111000;// set LCD signals (RS, RW, E) as out put, pwm :pd3  , servo control :pd5
 182:	88 ef       	ldi	r24, 0xF8	; 248
 184:	8a b9       	out	0x0a, r24	; 10
	pwm_init();
 186:	0e 94 40 00 	call	0x80	; 0x80 <pwm_init>
	init_LCD(); // initialize LCD
 18a:	0e 94 65 00 	call	0xca	; 0xca <init_LCD>
 18e:	83 ec       	ldi	r24, 0xC3	; 195
 190:	99 e0       	ldi	r25, 0x09	; 9
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x26>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x2c>
 198:	00 00       	nop
	_delay_ms(10); // delay of 100 Milli seconds

	LCD_cmd(0x0C); // display on, cursor off
 19a:	8c e0       	ldi	r24, 0x0C	; 12
 19c:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
 1a0:	83 ec       	ldi	r24, 0xC3	; 195
 1a2:	99 e0       	ldi	r25, 0x09	; 9
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x38>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x3e>
 1aa:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0x01); // clear
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>

	unsigned char ch[4]={' '};
 1b2:	19 82       	std	Y+1, r1	; 0x01
 1b4:	1a 82       	std	Y+2, r1	; 0x02
 1b6:	1b 82       	std	Y+3, r1	; 0x03
 1b8:	1c 82       	std	Y+4, r1	; 0x04
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t middle=0;
	uint8_t index=0;
	uint8_t thumb=0;
	uint8_t val=0;
	PORTD= (1<<PIND5);
 1be:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	86 e7       	ldi	r24, 0x76	; 118
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x58>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x5e>
 1ca:	00 00       	nop
	_delay_us(1500);
	PORTD = 0x00;
 1cc:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	9f e7       	ldi	r25, 0x7F	; 127
 1d0:	2a e1       	ldi	r18, 0x1A	; 26
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	91 50       	subi	r25, 0x01	; 1
 1d6:	20 40       	sbci	r18, 0x00	; 0
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x68>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x72>
 1de:	00 00       	nop
	_delay_ms(2000);
	while (1)
	{
		LCD_cmd(0x01);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
		
		ADMUX = 0b01100100;
 1e6:	84 e6       	ldi	r24, 0x64	; 100
 1e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA = 0b10000011; ///pin4
 1ec:	83 e8       	ldi	r24, 0x83	; 131
 1ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		for (int j =0;j<4;j++){
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	09 c0       	rjmp	.+18     	; 0x20a <main+0x9e>
			ch[j]=' ';///////////CLEARING CHAR ARRAY
 1f8:	e1 e0       	ldi	r30, 0x01	; 1
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	ec 0f       	add	r30, r28
 1fe:	fd 1f       	adc	r31, r29
 200:	e8 0f       	add	r30, r24
 202:	f9 1f       	adc	r31, r25
 204:	20 e2       	ldi	r18, 0x20	; 32
 206:	20 83       	st	Z, r18
	{
		LCD_cmd(0x01);
		
		ADMUX = 0b01100100;
		ADCSRA = 0b10000011; ///pin4
		for (int j =0;j<4;j++){
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	84 30       	cpi	r24, 0x04	; 4
 20c:	91 05       	cpc	r25, r1
 20e:	a4 f3       	brlt	.-24     	; 0x1f8 <main+0x8c>
			ch[j]=' ';///////////CLEARING CHAR ARRAY
		}
		////////////WRITING
		Cursor_pos(0,7);
 210:	67 e0       	ldi	r22, 0x07	; 7
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 a7 00 	call	0x14e	; 0x14e <Cursor_pos>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
 218:	ea e7       	ldi	r30, 0x7A	; 122
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	80 64       	ori	r24, 0x40	; 64
 220:	80 83       	st	Z, r24
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
 222:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 226:	86 fd       	sbrc	r24, 6
 228:	fc cf       	rjmp	.-8      	; 0x222 <main+0xb6>
		index=ADCH;
 22a:	d0 90 79 00 	lds	r13, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		ADMUX = 0b01100011;// pin3
 22e:	83 e6       	ldi	r24, 0x63	; 99
 230:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
 234:	ea e7       	ldi	r30, 0x7A	; 122
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	80 64       	ori	r24, 0x40	; 64
 23c:	80 83       	st	Z, r24
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
 23e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 242:	86 fd       	sbrc	r24, 6
 244:	fc cf       	rjmp	.-8      	; 0x23e <main+0xd2>
		thumb=ADCH;
 246:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		ADMUX = 0b01100101;// pin5
 24a:	85 e6       	ldi	r24, 0x65	; 101
 24c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
 250:	ea e7       	ldi	r30, 0x7A	; 122
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	80 64       	ori	r24, 0x40	; 64
 258:	80 83       	st	Z, r24
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
 25a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 25e:	86 fd       	sbrc	r24, 6
 260:	fc cf       	rjmp	.-8      	; 0x25a <main+0xee>
		middle=ADCH;
 262:	e9 e7       	ldi	r30, 0x79	; 121
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	e0 80       	ld	r14, Z
		itoa(ADCH,ch,8);  ////convert int to string
 268:	80 81       	ld	r24, Z
 26a:	48 e0       	ldi	r20, 0x08	; 8
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	be 01       	movw	r22, r28
 270:	6f 5f       	subi	r22, 0xFF	; 255
 272:	7f 4f       	sbci	r23, 0xFF	; 255
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 36 02 	call	0x46c	; 0x46c <itoa>

		for (int j=0;j<4;j++){
 27a:	00 e0       	ldi	r16, 0x00	; 0
 27c:	10 e0       	ldi	r17, 0x00	; 0
 27e:	13 c0       	rjmp	.+38     	; 0x2a6 <main+0x13a>
			if (ch[j]<'0'||ch[j]>'9')
 280:	e1 e0       	ldi	r30, 0x01	; 1
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	ec 0f       	add	r30, r28
 286:	fd 1f       	adc	r31, r29
 288:	e0 0f       	add	r30, r16
 28a:	f1 1f       	adc	r31, r17
 28c:	80 81       	ld	r24, Z
 28e:	90 ed       	ldi	r25, 0xD0	; 208
 290:	98 0f       	add	r25, r24
 292:	9a 30       	cpi	r25, 0x0A	; 10
 294:	20 f0       	brcs	.+8      	; 0x29e <main+0x132>
			LCD_write(' ');
 296:	80 e2       	ldi	r24, 0x20	; 32
 298:	0e 94 93 00 	call	0x126	; 0x126 <LCD_write>
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <main+0x136>
			else
			LCD_write(ch[j]);
 29e:	0e 94 93 00 	call	0x126	; 0x126 <LCD_write>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
		middle=ADCH;
		itoa(ADCH,ch,8);  ////convert int to string

		for (int j=0;j<4;j++){
 2a2:	0f 5f       	subi	r16, 0xFF	; 255
 2a4:	1f 4f       	sbci	r17, 0xFF	; 255
 2a6:	04 30       	cpi	r16, 0x04	; 4
 2a8:	11 05       	cpc	r17, r1
 2aa:	54 f3       	brlt	.-44     	; 0x280 <main+0x114>
 2ac:	83 ec       	ldi	r24, 0xC3	; 195
 2ae:	99 e0       	ldi	r25, 0x09	; 9
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <main+0x144>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x14a>
 2b6:	00 00       	nop
			else
			LCD_write(ch[j]);
		}
		_delay_ms(10);
		
		if (middle>200 && thumb>200 && index>200){//stop
 2b8:	98 ec       	ldi	r25, 0xC8	; 200
 2ba:	9e 15       	cp	r25, r14
 2bc:	58 f4       	brcc	.+22     	; 0x2d4 <main+0x168>
 2be:	9f 15       	cp	r25, r15
 2c0:	48 f4       	brcc	.+18     	; 0x2d4 <main+0x168>
 2c2:	9d 15       	cp	r25, r13
 2c4:	38 f4       	brcc	.+14     	; 0x2d4 <main+0x168>
			
			PORTC &= ~(1<<PINC0) ;
 2c6:	88 b1       	in	r24, 0x08	; 8
 2c8:	8e 7f       	andi	r24, 0xFE	; 254
 2ca:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<PINC1);
 2cc:	88 b1       	in	r24, 0x08	; 8
 2ce:	8d 7f       	andi	r24, 0xFD	; 253
 2d0:	88 b9       	out	0x08, r24	; 8
 2d2:	a0 c0       	rjmp	.+320    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			
		}
		else if (middle<200 &&thumb<200 && index<200){//forward
 2d4:	27 ec       	ldi	r18, 0xC7	; 199
 2d6:	2e 15       	cp	r18, r14
 2d8:	b8 f1       	brcs	.+110    	; 0x348 <main+0x1dc>
 2da:	2f 15       	cp	r18, r15
 2dc:	a8 f1       	brcs	.+106    	; 0x348 <main+0x1dc>
 2de:	2d 15       	cp	r18, r13
 2e0:	98 f1       	brcs	.+102    	; 0x348 <main+0x1dc>
			OCR2B=255*(375-(middle +thumb+index)/3)/375;
 2e2:	8f 2d       	mov	r24, r15
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	8e 0d       	add	r24, r14
 2e8:	91 1d       	adc	r25, r1
 2ea:	8d 0d       	add	r24, r13
 2ec:	91 1d       	adc	r25, r1
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	0e 94 0e 02 	call	0x41c	; 0x41c <__divmodhi4>
 2f6:	27 e7       	ldi	r18, 0x77	; 119
 2f8:	31 e0       	ldi	r19, 0x01	; 1
 2fa:	a9 01       	movw	r20, r18
 2fc:	46 1b       	sub	r20, r22
 2fe:	57 0b       	sbc	r21, r23
 300:	6f ef       	ldi	r22, 0xFF	; 255
 302:	64 9f       	mul	r22, r20
 304:	c0 01       	movw	r24, r0
 306:	65 9f       	mul	r22, r21
 308:	90 0d       	add	r25, r0
 30a:	11 24       	eor	r1, r1
 30c:	b9 01       	movw	r22, r18
 30e:	0e 94 0e 02 	call	0x41c	; 0x41c <__divmodhi4>
 312:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			PORTC |= (1<<PINC0) ;
 316:	88 b1       	in	r24, 0x08	; 8
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<PINC1);
 31c:	88 b1       	in	r24, 0x08	; 8
 31e:	8d 7f       	andi	r24, 0xFD	; 253
 320:	88 b9       	out	0x08, r24	; 8
			
			PORTD= (1<<PIND5);
 322:	80 e2       	ldi	r24, 0x20	; 32
 324:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 326:	86 e7       	ldi	r24, 0x76	; 118
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <main+0x1be>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x1c4>
 330:	00 00       	nop
			_delay_us(1500);
			PORTD = 0x00;
 332:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 334:	9f e7       	ldi	r25, 0x7F	; 127
 336:	2a e1       	ldi	r18, 0x1A	; 26
 338:	86 e0       	ldi	r24, 0x06	; 6
 33a:	91 50       	subi	r25, 0x01	; 1
 33c:	20 40       	sbci	r18, 0x00	; 0
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <main+0x1ce>
 342:	00 c0       	rjmp	.+0      	; 0x344 <main+0x1d8>
 344:	00 00       	nop
 346:	66 c0       	rjmp	.+204    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			_delay_ms(2000);
		}
		else if (middle<200 && thumb>200 && index<200){//back
 348:	97 ec       	ldi	r25, 0xC7	; 199
 34a:	9e 15       	cp	r25, r14
 34c:	b0 f1       	brcs	.+108    	; 0x3ba <main+0x24e>
 34e:	28 ec       	ldi	r18, 0xC8	; 200
 350:	2f 15       	cp	r18, r15
 352:	98 f5       	brcc	.+102    	; 0x3ba <main+0x24e>
 354:	9d 15       	cp	r25, r13
 356:	88 f1       	brcs	.+98     	; 0x3ba <main+0x24e>
			OCR2B=255*(375-(middle +index)/3)/375;
 358:	8d 2d       	mov	r24, r13
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	8e 0d       	add	r24, r14
 35e:	91 1d       	adc	r25, r1
 360:	63 e0       	ldi	r22, 0x03	; 3
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	0e 94 0e 02 	call	0x41c	; 0x41c <__divmodhi4>
 368:	27 e7       	ldi	r18, 0x77	; 119
 36a:	31 e0       	ldi	r19, 0x01	; 1
 36c:	a9 01       	movw	r20, r18
 36e:	46 1b       	sub	r20, r22
 370:	57 0b       	sbc	r21, r23
 372:	6f ef       	ldi	r22, 0xFF	; 255
 374:	64 9f       	mul	r22, r20
 376:	c0 01       	movw	r24, r0
 378:	65 9f       	mul	r22, r21
 37a:	90 0d       	add	r25, r0
 37c:	11 24       	eor	r1, r1
 37e:	b9 01       	movw	r22, r18
 380:	0e 94 0e 02 	call	0x41c	; 0x41c <__divmodhi4>
 384:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

			PORTC |= (1<<PINC1) ;
 388:	88 b1       	in	r24, 0x08	; 8
 38a:	82 60       	ori	r24, 0x02	; 2
 38c:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<PINC0);
 38e:	88 b1       	in	r24, 0x08	; 8
 390:	8e 7f       	andi	r24, 0xFE	; 254
 392:	88 b9       	out	0x08, r24	; 8
			PORTD= (1<<PIND5);
 394:	80 e2       	ldi	r24, 0x20	; 32
 396:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 398:	86 e7       	ldi	r24, 0x76	; 118
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <main+0x230>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x236>
 3a2:	00 00       	nop
			_delay_us(1500);
			PORTD = 0x00;
 3a4:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a6:	9f e7       	ldi	r25, 0x7F	; 127
 3a8:	2a e1       	ldi	r18, 0x1A	; 26
 3aa:	86 e0       	ldi	r24, 0x06	; 6
 3ac:	91 50       	subi	r25, 0x01	; 1
 3ae:	20 40       	sbci	r18, 0x00	; 0
 3b0:	80 40       	sbci	r24, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x240>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x24a>
 3b6:	00 00       	nop
 3b8:	2d c0       	rjmp	.+90     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			_delay_ms(2000);
		}
		else if(thumb<200 && index >200 &&middle>200){
 3ba:	97 ec       	ldi	r25, 0xC7	; 199
 3bc:	9f 15       	cp	r25, r15
 3be:	98 f0       	brcs	.+38     	; 0x3e6 <main+0x27a>
 3c0:	28 ec       	ldi	r18, 0xC8	; 200
 3c2:	2d 15       	cp	r18, r13
 3c4:	80 f4       	brcc	.+32     	; 0x3e6 <main+0x27a>
 3c6:	2e 15       	cp	r18, r14
 3c8:	70 f4       	brcc	.+28     	; 0x3e6 <main+0x27a>
			//go left
			PORTD = (1<<PIND5);
 3ca:	80 e2       	ldi	r24, 0x20	; 32
 3cc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	81 e2       	ldi	r24, 0x21	; 33
 3d0:	8a 95       	dec	r24
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <main+0x264>
 3d4:	00 00       	nop
			_delay_us(100);
			PORTD = 0x00;
 3d6:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d8:	8f e4       	ldi	r24, 0x4F	; 79
 3da:	93 ec       	ldi	r25, 0xC3	; 195
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <main+0x270>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x276>
 3e2:	00 00       	nop
 3e4:	17 c0       	rjmp	.+46     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>

			_delay_ms(200);
			

		}
		else if(thumb>200 && index <200 && middle>200){
 3e6:	98 ec       	ldi	r25, 0xC8	; 200
 3e8:	9f 15       	cp	r25, r15
 3ea:	a0 f4       	brcc	.+40     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3ec:	27 ec       	ldi	r18, 0xC7	; 199
 3ee:	2d 15       	cp	r18, r13
 3f0:	88 f0       	brcs	.+34     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3f2:	9e 15       	cp	r25, r14
 3f4:	78 f4       	brcc	.+30     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			//go right
			PORTD =(1<<PIND5);
 3f6:	80 e2       	ldi	r24, 0x20	; 32
 3f8:	8b b9       	out	0x0b, r24	; 11
 3fa:	8f e4       	ldi	r24, 0x4F	; 79
 3fc:	93 ec       	ldi	r25, 0xC3	; 195
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <main+0x292>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
			_delay_ms(200);
			PORTD = 0x00;
 406:	1b b8       	out	0x0b, r1	; 11
 408:	8f e4       	ldi	r24, 0x4F	; 79
 40a:	93 ec       	ldi	r25, 0xC3	; 195
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 412:	00 00       	nop
			_delay_ms(200);
			
		}
		LCD_cmd(0x01);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
		
		
	}
 41a:	e2 ce       	rjmp	.-572    	; 0x1e0 <main+0x74>

0000041c <__divmodhi4>:
 41c:	97 fb       	bst	r25, 7
 41e:	07 2e       	mov	r0, r23
 420:	16 f4       	brtc	.+4      	; 0x426 <__divmodhi4+0xa>
 422:	00 94       	com	r0
 424:	07 d0       	rcall	.+14     	; 0x434 <__divmodhi4_neg1>
 426:	77 fd       	sbrc	r23, 7
 428:	09 d0       	rcall	.+18     	; 0x43c <__divmodhi4_neg2>
 42a:	0e 94 22 02 	call	0x444	; 0x444 <__udivmodhi4>
 42e:	07 fc       	sbrc	r0, 7
 430:	05 d0       	rcall	.+10     	; 0x43c <__divmodhi4_neg2>
 432:	3e f4       	brtc	.+14     	; 0x442 <__divmodhi4_exit>

00000434 <__divmodhi4_neg1>:
 434:	90 95       	com	r25
 436:	81 95       	neg	r24
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	08 95       	ret

0000043c <__divmodhi4_neg2>:
 43c:	70 95       	com	r23
 43e:	61 95       	neg	r22
 440:	7f 4f       	sbci	r23, 0xFF	; 255

00000442 <__divmodhi4_exit>:
 442:	08 95       	ret

00000444 <__udivmodhi4>:
 444:	aa 1b       	sub	r26, r26
 446:	bb 1b       	sub	r27, r27
 448:	51 e1       	ldi	r21, 0x11	; 17
 44a:	07 c0       	rjmp	.+14     	; 0x45a <__udivmodhi4_ep>

0000044c <__udivmodhi4_loop>:
 44c:	aa 1f       	adc	r26, r26
 44e:	bb 1f       	adc	r27, r27
 450:	a6 17       	cp	r26, r22
 452:	b7 07       	cpc	r27, r23
 454:	10 f0       	brcs	.+4      	; 0x45a <__udivmodhi4_ep>
 456:	a6 1b       	sub	r26, r22
 458:	b7 0b       	sbc	r27, r23

0000045a <__udivmodhi4_ep>:
 45a:	88 1f       	adc	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	5a 95       	dec	r21
 460:	a9 f7       	brne	.-22     	; 0x44c <__udivmodhi4_loop>
 462:	80 95       	com	r24
 464:	90 95       	com	r25
 466:	bc 01       	movw	r22, r24
 468:	cd 01       	movw	r24, r26
 46a:	08 95       	ret

0000046c <itoa>:
 46c:	45 32       	cpi	r20, 0x25	; 37
 46e:	51 05       	cpc	r21, r1
 470:	20 f4       	brcc	.+8      	; 0x47a <itoa+0xe>
 472:	42 30       	cpi	r20, 0x02	; 2
 474:	10 f0       	brcs	.+4      	; 0x47a <itoa+0xe>
 476:	0c 94 41 02 	jmp	0x482	; 0x482 <__itoa_ncheck>
 47a:	fb 01       	movw	r30, r22
 47c:	10 82       	st	Z, r1
 47e:	cb 01       	movw	r24, r22
 480:	08 95       	ret

00000482 <__itoa_ncheck>:
 482:	bb 27       	eor	r27, r27
 484:	4a 30       	cpi	r20, 0x0A	; 10
 486:	31 f4       	brne	.+12     	; 0x494 <__itoa_ncheck+0x12>
 488:	99 23       	and	r25, r25
 48a:	22 f4       	brpl	.+8      	; 0x494 <__itoa_ncheck+0x12>
 48c:	bd e2       	ldi	r27, 0x2D	; 45
 48e:	90 95       	com	r25
 490:	81 95       	neg	r24
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__utoa_common>

00000498 <__utoa_ncheck>:
 498:	bb 27       	eor	r27, r27

0000049a <__utoa_common>:
 49a:	fb 01       	movw	r30, r22
 49c:	55 27       	eor	r21, r21
 49e:	aa 27       	eor	r26, r26
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	aa 1f       	adc	r26, r26
 4a6:	a4 17       	cp	r26, r20
 4a8:	10 f0       	brcs	.+4      	; 0x4ae <__utoa_common+0x14>
 4aa:	a4 1b       	sub	r26, r20
 4ac:	83 95       	inc	r24
 4ae:	50 51       	subi	r21, 0x10	; 16
 4b0:	b9 f7       	brne	.-18     	; 0x4a0 <__utoa_common+0x6>
 4b2:	a0 5d       	subi	r26, 0xD0	; 208
 4b4:	aa 33       	cpi	r26, 0x3A	; 58
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <__utoa_common+0x20>
 4b8:	a9 5d       	subi	r26, 0xD9	; 217
 4ba:	a1 93       	st	Z+, r26
 4bc:	00 97       	sbiw	r24, 0x00	; 0
 4be:	79 f7       	brne	.-34     	; 0x49e <__utoa_common+0x4>
 4c0:	b1 11       	cpse	r27, r1
 4c2:	b1 93       	st	Z+, r27
 4c4:	11 92       	st	Z+, r1
 4c6:	cb 01       	movw	r24, r22
 4c8:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <strrev>

000004cc <strrev>:
 4cc:	dc 01       	movw	r26, r24
 4ce:	fc 01       	movw	r30, r24
 4d0:	67 2f       	mov	r22, r23
 4d2:	71 91       	ld	r23, Z+
 4d4:	77 23       	and	r23, r23
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <strrev+0x4>
 4d8:	32 97       	sbiw	r30, 0x02	; 2
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <strrev+0x18>
 4dc:	7c 91       	ld	r23, X
 4de:	6d 93       	st	X+, r22
 4e0:	70 83       	st	Z, r23
 4e2:	62 91       	ld	r22, -Z
 4e4:	ae 17       	cp	r26, r30
 4e6:	bf 07       	cpc	r27, r31
 4e8:	c8 f3       	brcs	.-14     	; 0x4dc <strrev+0x10>
 4ea:	08 95       	ret

000004ec <_exit>:
 4ec:	f8 94       	cli

000004ee <__stop_program>:
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <__stop_program>
