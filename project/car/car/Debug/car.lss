
car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e1d  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000791  00000000  00000000  000013c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ff  00000000  00000000  00001b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000215c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fc  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000738  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  78:	0c 94 4d 02 	jmp	0x49a	; 0x49a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pwm_init>:
}

void pwm_init(void){
	///datasheet
	
	TCCR2A |=(1<<COM2B1) |(1<< WGM21) |(1<<WGM20) ; ///OC2B FAST PWM;
  80:	e0 eb       	ldi	r30, 0xB0	; 176
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	83 62       	ori	r24, 0x23	; 35
  88:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20) | (1<<WGM22);//no prescaler and wgm2
  8a:	e1 eb       	ldi	r30, 0xB1	; 177
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	89 60       	ori	r24, 0x09	; 9
  92:	80 83       	st	Z, r24
	
	OCR2A=800; //frequency
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B=100; //duty cycle 0->255
  9a:	84 e6       	ldi	r24, 0x64	; 100
  9c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  a0:	08 95       	ret

000000a2 <LCD_cmd>:

//*****sending command on LCD******//

void LCD_cmd(unsigned char cmd)
{
	LCD_DATA = cmd; // data lines are set to send command
  a2:	85 b9       	out	0x05, r24	; 5
	
	PORTD &= ~(1 << rs); // RS sets 0, for command data
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	8f 7e       	andi	r24, 0xEF	; 239
  a8:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << rw); // RW sets 0, to write data
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	8f 7b       	andi	r24, 0xBF	; 191
  ae:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << en); // make enable from high to low
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	87 ea       	ldi	r24, 0xA7	; 167
  b8:	91 e6       	ldi	r25, 0x61	; 97
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <LCD_cmd+0x18>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <LCD_cmd+0x1e>
  c0:	00 00       	nop
	
	_delay_ms(100);
	PORTD &= ~(1 << en); // make enable low
  c2:	8b b1       	in	r24, 0x0b	; 11
  c4:	8f 77       	andi	r24, 0x7F	; 127
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	08 95       	ret

000000ca <init_LCD>:



void init_LCD(void)
{
	LCD_cmd(0x38); // initialization in 8bit mode of 16X2 LCD
  ca:	88 e3       	ldi	r24, 0x38	; 56
  cc:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
  d0:	89 ef       	ldi	r24, 0xF9	; 249
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <init_LCD+0xa>
  d8:	00 c0       	rjmp	.+0      	; 0xda <init_LCD+0x10>
  da:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x01); // make clear LCD
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <init_LCD+0x1c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <init_LCD+0x22>
  ec:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x02); // return home
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <init_LCD+0x2e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <init_LCD+0x34>
  fe:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x06); // make increment in cursor
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
 106:	89 ef       	ldi	r24, 0xF9	; 249
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <init_LCD+0x40>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <init_LCD+0x46>
 110:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x80); // "8" go to first line and "0" is for 0th position
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
 118:	89 ef       	ldi	r24, 0xF9	; 249
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <init_LCD+0x52>
 120:	00 c0       	rjmp	.+0      	; 0x122 <init_LCD+0x58>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <LCD_write>:

//******write data on LCD******//

void LCD_write(unsigned char data)
{
	LCD_DATA = data; // data lines are set to send command
 126:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << rs); // RS sets 1, for command data
 128:	8b b1       	in	r24, 0x0b	; 11
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << rw); // RW sets 0, to write data
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 7b       	andi	r24, 0xBF	; 191
 132:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << en); // make enable from high to low
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	80 68       	ori	r24, 0x80	; 128
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	83 ef       	ldi	r24, 0xF3	; 243
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_write+0x18>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_write+0x1e>
 144:	00 00       	nop

	_delay_ms(2);
	PORTD &= ~(1 << en); // make enable low
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	8f 77       	andi	r24, 0x7F	; 127
 14a:	8b b9       	out	0x0b, r24	; 11
 14c:	08 95       	ret

0000014e <Cursor_pos>:


void Cursor_pos(unsigned char x_pos, unsigned char y_pos) //x awel aw tani row (0->1) el y column (0->15)
{
	uint8_t the_address=0;
	if (x_pos==0)
 14e:	88 23       	and	r24, r24
 150:	21 f0       	breq	.+8      	; 0x15a <Cursor_pos+0xc>
	the_address=0x80;
	else if(x_pos==1)
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	21 f0       	breq	.+8      	; 0x15e <Cursor_pos+0x10>



void Cursor_pos(unsigned char x_pos, unsigned char y_pos) //x awel aw tani row (0->1) el y column (0->15)
{
	uint8_t the_address=0;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	03 c0       	rjmp	.+6      	; 0x160 <Cursor_pos+0x12>
	if (x_pos==0)
	the_address=0x80;
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	01 c0       	rjmp	.+2      	; 0x160 <Cursor_pos+0x12>
	else if(x_pos==1)
	the_address=0xC0;
 15e:	80 ec       	ldi	r24, 0xC0	; 192
	if(y_pos<16)
 160:	60 31       	cpi	r22, 0x10	; 16
 162:	08 f4       	brcc	.+2      	; 0x166 <Cursor_pos+0x18>
	the_address+=y_pos;
 164:	86 0f       	add	r24, r22
	LCD_cmd(the_address);
 166:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
 16a:	08 95       	ret

0000016c <main>:



void pwm_init(void);
int main(void)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <main+0x6>
 172:	00 d0       	rcall	.+0      	; 0x174 <main+0x8>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
	DDRC |= (1<<DDC0) | (1<<DDC1); // outputs for motor driver
 178:	87 b1       	in	r24, 0x07	; 7
 17a:	83 60       	ori	r24, 0x03	; 3
 17c:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF; // set LCD data port as output
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111000;// set LCD signals (RS, RW, E) as out put, pwm :pd3  , servo control :pd5
 182:	88 ef       	ldi	r24, 0xF8	; 248
 184:	8a b9       	out	0x0a, r24	; 10
	pwm_init();
 186:	0e 94 40 00 	call	0x80	; 0x80 <pwm_init>
	init_LCD(); // initialize LCD
 18a:	0e 94 65 00 	call	0xca	; 0xca <init_LCD>
 18e:	83 ec       	ldi	r24, 0xC3	; 195
 190:	99 e0       	ldi	r25, 0x09	; 9
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x26>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x2c>
 198:	00 00       	nop
	_delay_ms(10); // delay of 100 Milli seconds

	LCD_cmd(0x0C); // display on, cursor off
 19a:	8c e0       	ldi	r24, 0x0C	; 12
 19c:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
 1a0:	83 ec       	ldi	r24, 0xC3	; 195
 1a2:	99 e0       	ldi	r25, 0x09	; 9
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x38>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x3e>
 1aa:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0x01); // clear
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>

	unsigned char ch[4]={' '};
 1b2:	19 82       	std	Y+1, r1	; 0x01
 1b4:	1a 82       	std	Y+2, r1	; 0x02
 1b6:	1b 82       	std	Y+3, r1	; 0x03
 1b8:	1c 82       	std	Y+4, r1	; 0x04
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t index=0;
	uint8_t thumb=0;
	uint8_t val=0;
	while (1)
	{
		LCD_cmd(0x01);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
		
		ADMUX = 0b01100100;
 1c4:	84 e6       	ldi	r24, 0x64	; 100
 1c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA = 0b10000011; ///pin4
 1ca:	83 e8       	ldi	r24, 0x83	; 131
 1cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		for (int j =0;j<4;j++){
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	09 c0       	rjmp	.+18     	; 0x1e8 <main+0x7c>
			ch[j]=' ';///////////CLEARING CHAR ARRAY
 1d6:	e1 e0       	ldi	r30, 0x01	; 1
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	ec 0f       	add	r30, r28
 1dc:	fd 1f       	adc	r31, r29
 1de:	e8 0f       	add	r30, r24
 1e0:	f9 1f       	adc	r31, r25
 1e2:	20 e2       	ldi	r18, 0x20	; 32
 1e4:	20 83       	st	Z, r18
	{
		LCD_cmd(0x01);
		
		ADMUX = 0b01100100;
		ADCSRA = 0b10000011; ///pin4
		for (int j =0;j<4;j++){
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	91 05       	cpc	r25, r1
 1ec:	a4 f3       	brlt	.-24     	; 0x1d6 <main+0x6a>
			ch[j]=' ';///////////CLEARING CHAR ARRAY
		}
		////////////WRITING
		Cursor_pos(0,7);
 1ee:	67 e0       	ldi	r22, 0x07	; 7
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 a7 00 	call	0x14e	; 0x14e <Cursor_pos>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
 1f6:	ea e7       	ldi	r30, 0x7A	; 122
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	80 64       	ori	r24, 0x40	; 64
 1fe:	80 83       	st	Z, r24
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
 200:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 204:	86 fd       	sbrc	r24, 6
 206:	fc cf       	rjmp	.-8      	; 0x200 <main+0x94>
		index=ADCH;
 208:	d0 90 79 00 	lds	r13, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		ADMUX = 0b01100011;// pin3
 20c:	83 e6       	ldi	r24, 0x63	; 99
 20e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
 212:	ea e7       	ldi	r30, 0x7A	; 122
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	80 64       	ori	r24, 0x40	; 64
 21a:	80 83       	st	Z, r24
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
 21c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 220:	86 fd       	sbrc	r24, 6
 222:	fc cf       	rjmp	.-8      	; 0x21c <main+0xb0>
		thumb=ADCH;
 224:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		ADMUX = 0b01100101;// pin5
 228:	85 e6       	ldi	r24, 0x65	; 101
 22a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
 22e:	ea e7       	ldi	r30, 0x7A	; 122
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 64       	ori	r24, 0x40	; 64
 236:	80 83       	st	Z, r24
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
 238:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 23c:	86 fd       	sbrc	r24, 6
 23e:	fc cf       	rjmp	.-8      	; 0x238 <main+0xcc>
		middle=ADCH;
 240:	e9 e7       	ldi	r30, 0x79	; 121
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	e0 80       	ld	r14, Z
		itoa(ADCH,ch,8);  ////convert int to string
 246:	80 81       	ld	r24, Z
 248:	48 e0       	ldi	r20, 0x08	; 8
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	be 01       	movw	r22, r28
 24e:	6f 5f       	subi	r22, 0xFF	; 255
 250:	7f 4f       	sbci	r23, 0xFF	; 255
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 0d 02 	call	0x41a	; 0x41a <itoa>

		for (int j=0;j<4;j++){
 258:	00 e0       	ldi	r16, 0x00	; 0
 25a:	10 e0       	ldi	r17, 0x00	; 0
 25c:	13 c0       	rjmp	.+38     	; 0x284 <main+0x118>
			if (ch[j]<'0'||ch[j]>'9')
 25e:	e1 e0       	ldi	r30, 0x01	; 1
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ec 0f       	add	r30, r28
 264:	fd 1f       	adc	r31, r29
 266:	e0 0f       	add	r30, r16
 268:	f1 1f       	adc	r31, r17
 26a:	80 81       	ld	r24, Z
 26c:	90 ed       	ldi	r25, 0xD0	; 208
 26e:	98 0f       	add	r25, r24
 270:	9a 30       	cpi	r25, 0x0A	; 10
 272:	20 f0       	brcs	.+8      	; 0x27c <main+0x110>
			LCD_write(' ');
 274:	80 e2       	ldi	r24, 0x20	; 32
 276:	0e 94 93 00 	call	0x126	; 0x126 <LCD_write>
 27a:	02 c0       	rjmp	.+4      	; 0x280 <main+0x114>
			else
			LCD_write(ch[j]);
 27c:	0e 94 93 00 	call	0x126	; 0x126 <LCD_write>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
		middle=ADCH;
		itoa(ADCH,ch,8);  ////convert int to string

		for (int j=0;j<4;j++){
 280:	0f 5f       	subi	r16, 0xFF	; 255
 282:	1f 4f       	sbci	r17, 0xFF	; 255
 284:	04 30       	cpi	r16, 0x04	; 4
 286:	11 05       	cpc	r17, r1
 288:	54 f3       	brlt	.-44     	; 0x25e <main+0xf2>
 28a:	83 ec       	ldi	r24, 0xC3	; 195
 28c:	99 e0       	ldi	r25, 0x09	; 9
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x122>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x128>
 294:	00 00       	nop
			LCD_write(' ');
			else
			LCD_write(ch[j]);
		}
		_delay_ms(10);
		if (middle>200 && thumb>200 && index>200){//stop
 296:	98 ec       	ldi	r25, 0xC8	; 200
 298:	9e 15       	cp	r25, r14
 29a:	b8 f4       	brcc	.+46     	; 0x2ca <main+0x15e>
 29c:	9f 15       	cp	r25, r15
 29e:	a8 f4       	brcc	.+42     	; 0x2ca <main+0x15e>
 2a0:	9d 15       	cp	r25, r13
 2a2:	98 f4       	brcc	.+38     	; 0x2ca <main+0x15e>
			PORTD= (1<<PIND5);
 2a4:	80 e2       	ldi	r24, 0x20	; 32
 2a6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a8:	82 e3       	ldi	r24, 0x32	; 50
 2aa:	8a 95       	dec	r24
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0x13e>
			_delay_us(150);
			PORTD = 0x00;
 2ae:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	8f e4       	ldi	r24, 0x4F	; 79
 2b2:	93 ec       	ldi	r25, 0xC3	; 195
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x148>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x14e>
 2ba:	00 00       	nop
			_delay_ms(200);
			PORTC &= ~(1<<PINC0) ;
 2bc:	88 b1       	in	r24, 0x08	; 8
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<PINC1);
 2c2:	88 b1       	in	r24, 0x08	; 8
 2c4:	8d 7f       	andi	r24, 0xFD	; 253
 2c6:	88 b9       	out	0x08, r24	; 8
 2c8:	7c c0       	rjmp	.+248    	; 0x3c2 <main+0x256>
			
		}
		else if (middle<200 &&thumb<200 && index<200){//forward
 2ca:	97 ec       	ldi	r25, 0xC7	; 199
 2cc:	9e 15       	cp	r25, r14
 2ce:	28 f1       	brcs	.+74     	; 0x31a <main+0x1ae>
 2d0:	9f 15       	cp	r25, r15
 2d2:	18 f1       	brcs	.+70     	; 0x31a <main+0x1ae>
 2d4:	9d 15       	cp	r25, r13
 2d6:	08 f1       	brcs	.+66     	; 0x31a <main+0x1ae>
			OCR2B=375-(middle +thumb+index)/3;
 2d8:	8f 2d       	mov	r24, r15
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	8e 0d       	add	r24, r14
 2de:	91 1d       	adc	r25, r1
 2e0:	8d 0d       	add	r24, r13
 2e2:	91 1d       	adc	r25, r1
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__divmodhi4>
 2ec:	87 e7       	ldi	r24, 0x77	; 119
 2ee:	86 1b       	sub	r24, r22
 2f0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

			PORTC |= (1<<PINC0) ;
 2f4:	88 b1       	in	r24, 0x08	; 8
 2f6:	81 60       	ori	r24, 0x01	; 1
 2f8:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<PINC1);
 2fa:	88 b1       	in	r24, 0x08	; 8
 2fc:	8d 7f       	andi	r24, 0xFD	; 253
 2fe:	88 b9       	out	0x08, r24	; 8
			PORTD= (1<<PIND5);
 300:	80 e2       	ldi	r24, 0x20	; 32
 302:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 304:	82 e3       	ldi	r24, 0x32	; 50
 306:	8a 95       	dec	r24
 308:	f1 f7       	brne	.-4      	; 0x306 <main+0x19a>
			_delay_us(150);
			PORTD = 0x00;
 30a:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30c:	8f e4       	ldi	r24, 0x4F	; 79
 30e:	93 ec       	ldi	r25, 0xC3	; 195
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x1a4>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x1aa>
 316:	00 00       	nop
 318:	54 c0       	rjmp	.+168    	; 0x3c2 <main+0x256>
			_delay_ms(200);
		}
		else if (middle<200 && thumb>200 && index<200){//back
 31a:	97 ec       	ldi	r25, 0xC7	; 199
 31c:	9e 15       	cp	r25, r14
 31e:	20 f1       	brcs	.+72     	; 0x368 <main+0x1fc>
 320:	88 ec       	ldi	r24, 0xC8	; 200
 322:	8f 15       	cp	r24, r15
 324:	08 f5       	brcc	.+66     	; 0x368 <main+0x1fc>
 326:	9d 15       	cp	r25, r13
 328:	f8 f0       	brcs	.+62     	; 0x368 <main+0x1fc>
			OCR2B=375-(middle +index)/3;
 32a:	8d 2d       	mov	r24, r13
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	8e 0d       	add	r24, r14
 330:	91 1d       	adc	r25, r1
 332:	63 e0       	ldi	r22, 0x03	; 3
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__divmodhi4>
 33a:	87 e7       	ldi	r24, 0x77	; 119
 33c:	86 1b       	sub	r24, r22
 33e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

			PORTC |= (1<<PINC1) ;
 342:	88 b1       	in	r24, 0x08	; 8
 344:	82 60       	ori	r24, 0x02	; 2
 346:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<PINC0);
 348:	88 b1       	in	r24, 0x08	; 8
 34a:	8e 7f       	andi	r24, 0xFE	; 254
 34c:	88 b9       	out	0x08, r24	; 8
			PORTD= (1<<PIND5);
 34e:	80 e2       	ldi	r24, 0x20	; 32
 350:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 352:	92 e3       	ldi	r25, 0x32	; 50
 354:	9a 95       	dec	r25
 356:	f1 f7       	brne	.-4      	; 0x354 <main+0x1e8>
			_delay_us(150);
			PORTD = 0x00;
 358:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	8f e4       	ldi	r24, 0x4F	; 79
 35c:	93 ec       	ldi	r25, 0xC3	; 195
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <main+0x1f2>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x1f8>
 364:	00 00       	nop
 366:	2d c0       	rjmp	.+90     	; 0x3c2 <main+0x256>
			_delay_ms(200);
		}
		else if(thumb<200 && index >200 &&middle>200){
 368:	97 ec       	ldi	r25, 0xC7	; 199
 36a:	9f 15       	cp	r25, r15
 36c:	98 f0       	brcs	.+38     	; 0x394 <main+0x228>
 36e:	88 ec       	ldi	r24, 0xC8	; 200
 370:	8d 15       	cp	r24, r13
 372:	80 f4       	brcc	.+32     	; 0x394 <main+0x228>
 374:	8e 15       	cp	r24, r14
 376:	70 f4       	brcc	.+28     	; 0x394 <main+0x228>
			//go left
			PORTD = (1<<PIND5);
 378:	80 e2       	ldi	r24, 0x20	; 32
 37a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	91 e2       	ldi	r25, 0x21	; 33
 37e:	9a 95       	dec	r25
 380:	f1 f7       	brne	.-4      	; 0x37e <main+0x212>
 382:	00 00       	nop
			_delay_us(100);
			PORTD = 0x00;
 384:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 386:	8f e4       	ldi	r24, 0x4F	; 79
 388:	93 ec       	ldi	r25, 0xC3	; 195
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <main+0x21e>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <main+0x224>
 390:	00 00       	nop
 392:	17 c0       	rjmp	.+46     	; 0x3c2 <main+0x256>

			_delay_ms(200);
			

		}
		else if(thumb>200 && index <200 && middle>200){
 394:	98 ec       	ldi	r25, 0xC8	; 200
 396:	9f 15       	cp	r25, r15
 398:	a0 f4       	brcc	.+40     	; 0x3c2 <main+0x256>
 39a:	87 ec       	ldi	r24, 0xC7	; 199
 39c:	8d 15       	cp	r24, r13
 39e:	88 f0       	brcs	.+34     	; 0x3c2 <main+0x256>
 3a0:	9e 15       	cp	r25, r14
 3a2:	78 f4       	brcc	.+30     	; 0x3c2 <main+0x256>
			//go right
			PORTD =(1<<PIND5);
 3a4:	80 e2       	ldi	r24, 0x20	; 32
 3a6:	8b b9       	out	0x0b, r24	; 11
 3a8:	8f e4       	ldi	r24, 0x4F	; 79
 3aa:	93 ec       	ldi	r25, 0xC3	; 195
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0x240>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x246>
 3b2:	00 00       	nop
			_delay_ms(200);
			PORTD = 0x00;
 3b4:	1b b8       	out	0x0b, r1	; 11
 3b6:	8f e4       	ldi	r24, 0x4F	; 79
 3b8:	93 ec       	ldi	r25, 0xC3	; 195
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x24e>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x254>
 3c0:	00 00       	nop
			_delay_ms(200);
			

		}
		LCD_cmd(0x01);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_cmd>
		
		
	}
 3c8:	fa ce       	rjmp	.-524    	; 0x1be <main+0x52>

000003ca <__divmodhi4>:
 3ca:	97 fb       	bst	r25, 7
 3cc:	07 2e       	mov	r0, r23
 3ce:	16 f4       	brtc	.+4      	; 0x3d4 <__divmodhi4+0xa>
 3d0:	00 94       	com	r0
 3d2:	07 d0       	rcall	.+14     	; 0x3e2 <__divmodhi4_neg1>
 3d4:	77 fd       	sbrc	r23, 7
 3d6:	09 d0       	rcall	.+18     	; 0x3ea <__divmodhi4_neg2>
 3d8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__udivmodhi4>
 3dc:	07 fc       	sbrc	r0, 7
 3de:	05 d0       	rcall	.+10     	; 0x3ea <__divmodhi4_neg2>
 3e0:	3e f4       	brtc	.+14     	; 0x3f0 <__divmodhi4_exit>

000003e2 <__divmodhi4_neg1>:
 3e2:	90 95       	com	r25
 3e4:	81 95       	neg	r24
 3e6:	9f 4f       	sbci	r25, 0xFF	; 255
 3e8:	08 95       	ret

000003ea <__divmodhi4_neg2>:
 3ea:	70 95       	com	r23
 3ec:	61 95       	neg	r22
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255

000003f0 <__divmodhi4_exit>:
 3f0:	08 95       	ret

000003f2 <__udivmodhi4>:
 3f2:	aa 1b       	sub	r26, r26
 3f4:	bb 1b       	sub	r27, r27
 3f6:	51 e1       	ldi	r21, 0x11	; 17
 3f8:	07 c0       	rjmp	.+14     	; 0x408 <__udivmodhi4_ep>

000003fa <__udivmodhi4_loop>:
 3fa:	aa 1f       	adc	r26, r26
 3fc:	bb 1f       	adc	r27, r27
 3fe:	a6 17       	cp	r26, r22
 400:	b7 07       	cpc	r27, r23
 402:	10 f0       	brcs	.+4      	; 0x408 <__udivmodhi4_ep>
 404:	a6 1b       	sub	r26, r22
 406:	b7 0b       	sbc	r27, r23

00000408 <__udivmodhi4_ep>:
 408:	88 1f       	adc	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	5a 95       	dec	r21
 40e:	a9 f7       	brne	.-22     	; 0x3fa <__udivmodhi4_loop>
 410:	80 95       	com	r24
 412:	90 95       	com	r25
 414:	bc 01       	movw	r22, r24
 416:	cd 01       	movw	r24, r26
 418:	08 95       	ret

0000041a <itoa>:
 41a:	45 32       	cpi	r20, 0x25	; 37
 41c:	51 05       	cpc	r21, r1
 41e:	20 f4       	brcc	.+8      	; 0x428 <itoa+0xe>
 420:	42 30       	cpi	r20, 0x02	; 2
 422:	10 f0       	brcs	.+4      	; 0x428 <itoa+0xe>
 424:	0c 94 18 02 	jmp	0x430	; 0x430 <__itoa_ncheck>
 428:	fb 01       	movw	r30, r22
 42a:	10 82       	st	Z, r1
 42c:	cb 01       	movw	r24, r22
 42e:	08 95       	ret

00000430 <__itoa_ncheck>:
 430:	bb 27       	eor	r27, r27
 432:	4a 30       	cpi	r20, 0x0A	; 10
 434:	31 f4       	brne	.+12     	; 0x442 <__itoa_ncheck+0x12>
 436:	99 23       	and	r25, r25
 438:	22 f4       	brpl	.+8      	; 0x442 <__itoa_ncheck+0x12>
 43a:	bd e2       	ldi	r27, 0x2D	; 45
 43c:	90 95       	com	r25
 43e:	81 95       	neg	r24
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	0c 94 24 02 	jmp	0x448	; 0x448 <__utoa_common>

00000446 <__utoa_ncheck>:
 446:	bb 27       	eor	r27, r27

00000448 <__utoa_common>:
 448:	fb 01       	movw	r30, r22
 44a:	55 27       	eor	r21, r21
 44c:	aa 27       	eor	r26, r26
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	aa 1f       	adc	r26, r26
 454:	a4 17       	cp	r26, r20
 456:	10 f0       	brcs	.+4      	; 0x45c <__utoa_common+0x14>
 458:	a4 1b       	sub	r26, r20
 45a:	83 95       	inc	r24
 45c:	50 51       	subi	r21, 0x10	; 16
 45e:	b9 f7       	brne	.-18     	; 0x44e <__utoa_common+0x6>
 460:	a0 5d       	subi	r26, 0xD0	; 208
 462:	aa 33       	cpi	r26, 0x3A	; 58
 464:	08 f0       	brcs	.+2      	; 0x468 <__utoa_common+0x20>
 466:	a9 5d       	subi	r26, 0xD9	; 217
 468:	a1 93       	st	Z+, r26
 46a:	00 97       	sbiw	r24, 0x00	; 0
 46c:	79 f7       	brne	.-34     	; 0x44c <__utoa_common+0x4>
 46e:	b1 11       	cpse	r27, r1
 470:	b1 93       	st	Z+, r27
 472:	11 92       	st	Z+, r1
 474:	cb 01       	movw	r24, r22
 476:	0c 94 3d 02 	jmp	0x47a	; 0x47a <strrev>

0000047a <strrev>:
 47a:	dc 01       	movw	r26, r24
 47c:	fc 01       	movw	r30, r24
 47e:	67 2f       	mov	r22, r23
 480:	71 91       	ld	r23, Z+
 482:	77 23       	and	r23, r23
 484:	e1 f7       	brne	.-8      	; 0x47e <strrev+0x4>
 486:	32 97       	sbiw	r30, 0x02	; 2
 488:	04 c0       	rjmp	.+8      	; 0x492 <strrev+0x18>
 48a:	7c 91       	ld	r23, X
 48c:	6d 93       	st	X+, r22
 48e:	70 83       	st	Z, r23
 490:	62 91       	ld	r22, -Z
 492:	ae 17       	cp	r26, r30
 494:	bf 07       	cpc	r27, r31
 496:	c8 f3       	brcs	.-14     	; 0x48a <strrev+0x10>
 498:	08 95       	ret

0000049a <_exit>:
 49a:	f8 94       	cli

0000049c <__stop_program>:
 49c:	ff cf       	rjmp	.-2      	; 0x49c <__stop_program>
