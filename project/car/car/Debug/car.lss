
car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd5  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000773  00000000  00000000  00001135  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000587  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000414  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004a3  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000277b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  78:	0c 94 24 02 	jmp	0x448	; 0x448 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pwm_init>:
}

void pwm_init(void){
	///OC2B
	
	TCCR2A |=(1<<COM2B1) |(1<< WGM21) |(1<<WGM20) ; ///OC2B FAST PWM;
  80:	e0 eb       	ldi	r30, 0xB0	; 176
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	83 62       	ori	r24, 0x23	; 35
  88:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20) | (1<<WGM22);//no prescaler and wgm2
  8a:	e1 eb       	ldi	r30, 0xB1	; 177
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	89 60       	ori	r24, 0x09	; 9
  92:	80 83       	st	Z, r24
	
	OCR2B=255; //duty cycle 0->255
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  9a:	08 95       	ret

0000009c <LCD_cmd>:

//*****sending command on LCD******//

void LCD_cmd(unsigned char cmd)
{
	LCD_DATA = cmd; // data lines are set to send command
  9c:	85 b9       	out	0x05, r24	; 5
	
	PORTD &= ~(1 << rs); // RS sets 0, for command data
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	8f 7e       	andi	r24, 0xEF	; 239
  a2:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << rw); // RW sets 0, to write data
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	8f 7b       	andi	r24, 0xBF	; 191
  a8:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << en); // make enable from high to low
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	87 ea       	ldi	r24, 0xA7	; 167
  b2:	91 e6       	ldi	r25, 0x61	; 97
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_cmd+0x18>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_cmd+0x1e>
  ba:	00 00       	nop
	
	_delay_ms(100);
	PORTD &= ~(1 << en); // make enable low
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8f 77       	andi	r24, 0x7F	; 127
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	08 95       	ret

000000c4 <init_LCD>:



void init_LCD(void)
{
	LCD_cmd(0x38); // initialization in 8bit mode of 16X2 LCD
  c4:	88 e3       	ldi	r24, 0x38	; 56
  c6:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_cmd>
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <init_LCD+0xa>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <init_LCD+0x10>
  d4:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x01); // make clear LCD
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_cmd>
  dc:	89 ef       	ldi	r24, 0xF9	; 249
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <init_LCD+0x1c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <init_LCD+0x22>
  e6:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x02); // return home
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_cmd>
  ee:	89 ef       	ldi	r24, 0xF9	; 249
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <init_LCD+0x2e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <init_LCD+0x34>
  f8:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x06); // make increment in cursor
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_cmd>
 100:	89 ef       	ldi	r24, 0xF9	; 249
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <init_LCD+0x40>
 108:	00 c0       	rjmp	.+0      	; 0x10a <init_LCD+0x46>
 10a:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x80); // "8" go to first line and "0" is for 0th position
 10c:	80 e8       	ldi	r24, 0x80	; 128
 10e:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_cmd>
 112:	89 ef       	ldi	r24, 0xF9	; 249
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <init_LCD+0x52>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <init_LCD+0x58>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <LCD_write>:

//******write data on LCD******//

void LCD_write(unsigned char data)
{
	LCD_DATA = data; // data lines are set to send command
 120:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << rs); // RS sets 1, for command data
 122:	8b b1       	in	r24, 0x0b	; 11
 124:	80 61       	ori	r24, 0x10	; 16
 126:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << rw); // RW sets 0, to write data
 128:	8b b1       	in	r24, 0x0b	; 11
 12a:	8f 7b       	andi	r24, 0xBF	; 191
 12c:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << en); // make enable from high to low
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	80 68       	ori	r24, 0x80	; 128
 132:	8b b9       	out	0x0b, r24	; 11
 134:	83 ef       	ldi	r24, 0xF3	; 243
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_write+0x18>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_write+0x1e>
 13e:	00 00       	nop

	_delay_ms(2);
	PORTD &= ~(1 << en); // make enable low
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 77       	andi	r24, 0x7F	; 127
 144:	8b b9       	out	0x0b, r24	; 11
 146:	08 95       	ret

00000148 <Cursor_pos>:


void Cursor_pos(unsigned char x_pos, unsigned char y_pos) //x awel aw tani row (0->1) el y column (0->15)
{
	uint8_t the_address=0;
	if (x_pos==0)
 148:	88 23       	and	r24, r24
 14a:	21 f0       	breq	.+8      	; 0x154 <Cursor_pos+0xc>
	the_address=0x80;
	else if(x_pos==1)
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	21 f0       	breq	.+8      	; 0x158 <Cursor_pos+0x10>



void Cursor_pos(unsigned char x_pos, unsigned char y_pos) //x awel aw tani row (0->1) el y column (0->15)
{
	uint8_t the_address=0;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	03 c0       	rjmp	.+6      	; 0x15a <Cursor_pos+0x12>
	if (x_pos==0)
	the_address=0x80;
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	01 c0       	rjmp	.+2      	; 0x15a <Cursor_pos+0x12>
	else if(x_pos==1)
	the_address=0xC0;
 158:	80 ec       	ldi	r24, 0xC0	; 192
	if(y_pos<16)
 15a:	60 31       	cpi	r22, 0x10	; 16
 15c:	08 f4       	brcc	.+2      	; 0x160 <Cursor_pos+0x18>
	the_address+=y_pos;
 15e:	86 0f       	add	r24, r22
	LCD_cmd(the_address);
 160:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_cmd>
 164:	08 95       	ret

00000166 <servo_init>:
	
}

void servo_init(){
	//OC0B
	TCCR0A |=(1<<COM0B1) | (1<<WGM00) ;
 166:	84 b5       	in	r24, 0x24	; 36
 168:	81 62       	ori	r24, 0x21	; 33
 16a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=(1<<CS01) | (1<<CS00);
 16c:	85 b5       	in	r24, 0x25	; 37
 16e:	83 60       	ori	r24, 0x03	; 3
 170:	85 bd       	out	0x25, r24	; 37
 172:	08 95       	ret

00000174 <main>:



void pwm_init(void);
int main(void)
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	00 d0       	rcall	.+0      	; 0x17a <main+0x6>
 17a:	00 d0       	rcall	.+0      	; 0x17c <main+0x8>
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
	DDRC |= (1<<DDC0) | (1<<DDC1); // outputs for motor driver
 180:	87 b1       	in	r24, 0x07	; 7
 182:	83 60       	ori	r24, 0x03	; 3
 184:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF; // set LCD data port as output
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111000;// set LCD signals (RS, RW, E) as out put, pwm :pd3  , servo control :pd5
 18a:	88 ef       	ldi	r24, 0xF8	; 248
 18c:	8a b9       	out	0x0a, r24	; 10
	pwm_init();
 18e:	0e 94 40 00 	call	0x80	; 0x80 <pwm_init>
	init_LCD(); // initialize LCD
 192:	0e 94 62 00 	call	0xc4	; 0xc4 <init_LCD>
 196:	83 ec       	ldi	r24, 0xC3	; 195
 198:	99 e0       	ldi	r25, 0x09	; 9
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x26>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x2c>
 1a0:	00 00       	nop
	_delay_ms(10); // delay of 100 Milli seconds

	LCD_cmd(0x0C); // display on, cursor off
 1a2:	8c e0       	ldi	r24, 0x0C	; 12
 1a4:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_cmd>
 1a8:	83 ec       	ldi	r24, 0xC3	; 195
 1aa:	99 e0       	ldi	r25, 0x09	; 9
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x38>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x3e>
 1b2:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0x01); // clear
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_cmd>

	unsigned char ch[4]={' '};
 1ba:	19 82       	std	Y+1, r1	; 0x01
 1bc:	1a 82       	std	Y+2, r1	; 0x02
 1be:	1b 82       	std	Y+3, r1	; 0x03
 1c0:	1c 82       	std	Y+4, r1	; 0x04
 1c2:	80 e2       	ldi	r24, 0x20	; 32
 1c4:	89 83       	std	Y+1, r24	; 0x01
	uint8_t middle=0;
	uint8_t index=0;
	uint8_t thumb=0;
	uint8_t val=0;
	
	servo_init();
 1c6:	0e 94 b3 00 	call	0x166	; 0x166 <servo_init>
	OCR0B=12;
 1ca:	8c e0       	ldi	r24, 0x0C	; 12
 1cc:	88 bd       	out	0x28, r24	; 40
	while (1)
	{
		LCD_cmd(0x01);
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_cmd>
		
		ADMUX = 0b01100100;
 1d4:	84 e6       	ldi	r24, 0x64	; 100
 1d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA = 0b10000011; ///pin4
 1da:	83 e8       	ldi	r24, 0x83	; 131
 1dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		for (int j =0;j<4;j++){
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	09 c0       	rjmp	.+18     	; 0x1f8 <main+0x84>
			ch[j]=' ';///////////CLEARING CHAR ARRAY
 1e6:	e1 e0       	ldi	r30, 0x01	; 1
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	ec 0f       	add	r30, r28
 1ec:	fd 1f       	adc	r31, r29
 1ee:	e8 0f       	add	r30, r24
 1f0:	f9 1f       	adc	r31, r25
 1f2:	20 e2       	ldi	r18, 0x20	; 32
 1f4:	20 83       	st	Z, r18
	{
		LCD_cmd(0x01);
		
		ADMUX = 0b01100100;
		ADCSRA = 0b10000011; ///pin4
		for (int j =0;j<4;j++){
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	84 30       	cpi	r24, 0x04	; 4
 1fa:	91 05       	cpc	r25, r1
 1fc:	a4 f3       	brlt	.-24     	; 0x1e6 <main+0x72>
			ch[j]=' ';///////////CLEARING CHAR ARRAY
		}
		////////////WRITING
		Cursor_pos(0,7);
 1fe:	67 e0       	ldi	r22, 0x07	; 7
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 a4 00 	call	0x148	; 0x148 <Cursor_pos>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
 206:	ea e7       	ldi	r30, 0x7A	; 122
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	80 64       	ori	r24, 0x40	; 64
 20e:	80 83       	st	Z, r24
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
 210:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 214:	86 fd       	sbrc	r24, 6
 216:	fc cf       	rjmp	.-8      	; 0x210 <main+0x9c>
		index=ADCH;
 218:	b0 90 79 00 	lds	r11, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		ADMUX = 0b01100011;// pin3
 21c:	83 e6       	ldi	r24, 0x63	; 99
 21e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
 222:	ea e7       	ldi	r30, 0x7A	; 122
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	80 83       	st	Z, r24
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
 22c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 230:	86 fd       	sbrc	r24, 6
 232:	fc cf       	rjmp	.-8      	; 0x22c <main+0xb8>
		thumb=ADCH;
 234:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		ADMUX = 0b01100101;// pin5
 238:	85 e6       	ldi	r24, 0x65	; 101
 23a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
 23e:	ea e7       	ldi	r30, 0x7A	; 122
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	80 64       	ori	r24, 0x40	; 64
 246:	80 83       	st	Z, r24
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
 248:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 24c:	86 fd       	sbrc	r24, 6
 24e:	fc cf       	rjmp	.-8      	; 0x248 <main+0xd4>
		middle=ADCH;
 250:	e0 90 79 00 	lds	r14, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		itoa(thumb,ch,10);  ////convert int to string
 254:	cf 2c       	mov	r12, r15
 256:	d1 2c       	mov	r13, r1
 258:	4a e0       	ldi	r20, 0x0A	; 10
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	be 01       	movw	r22, r28
 25e:	6f 5f       	subi	r22, 0xFF	; 255
 260:	7f 4f       	sbci	r23, 0xFF	; 255
 262:	c6 01       	movw	r24, r12
 264:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <itoa>

		for (int j=0;j<4;j++){
 268:	00 e0       	ldi	r16, 0x00	; 0
 26a:	10 e0       	ldi	r17, 0x00	; 0
 26c:	13 c0       	rjmp	.+38     	; 0x294 <main+0x120>
			if (ch[j]<'0'||ch[j]>'9')
 26e:	e1 e0       	ldi	r30, 0x01	; 1
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	ec 0f       	add	r30, r28
 274:	fd 1f       	adc	r31, r29
 276:	e0 0f       	add	r30, r16
 278:	f1 1f       	adc	r31, r17
 27a:	80 81       	ld	r24, Z
 27c:	90 ed       	ldi	r25, 0xD0	; 208
 27e:	98 0f       	add	r25, r24
 280:	9a 30       	cpi	r25, 0x0A	; 10
 282:	20 f0       	brcs	.+8      	; 0x28c <main+0x118>
			LCD_write(' ');
 284:	80 e2       	ldi	r24, 0x20	; 32
 286:	0e 94 90 00 	call	0x120	; 0x120 <LCD_write>
 28a:	02 c0       	rjmp	.+4      	; 0x290 <main+0x11c>
			else
			LCD_write(ch[j]);
 28c:	0e 94 90 00 	call	0x120	; 0x120 <LCD_write>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
		middle=ADCH;
		itoa(thumb,ch,10);  ////convert int to string

		for (int j=0;j<4;j++){
 290:	0f 5f       	subi	r16, 0xFF	; 255
 292:	1f 4f       	sbci	r17, 0xFF	; 255
 294:	04 30       	cpi	r16, 0x04	; 4
 296:	11 05       	cpc	r17, r1
 298:	54 f3       	brlt	.-44     	; 0x26e <main+0xfa>
 29a:	83 ec       	ldi	r24, 0xC3	; 195
 29c:	99 e0       	ldi	r25, 0x09	; 9
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0x12a>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x130>
 2a4:	00 00       	nop
			else
			LCD_write(ch[j]);
		}
		_delay_ms(10);
		
		if (middle>130 && thumb>130 && index>130){//stop
 2a6:	92 e8       	ldi	r25, 0x82	; 130
 2a8:	9e 15       	cp	r25, r14
 2aa:	58 f4       	brcc	.+22     	; 0x2c2 <main+0x14e>
 2ac:	9f 15       	cp	r25, r15
 2ae:	48 f4       	brcc	.+18     	; 0x2c2 <main+0x14e>
 2b0:	9b 15       	cp	r25, r11
 2b2:	38 f4       	brcc	.+14     	; 0x2c2 <main+0x14e>
			
			PORTC &= ~(1<<PINC0) ;
 2b4:	88 b1       	in	r24, 0x08	; 8
 2b6:	8e 7f       	andi	r24, 0xFE	; 254
 2b8:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<PINC1);
 2ba:	88 b1       	in	r24, 0x08	; 8
 2bc:	8d 7f       	andi	r24, 0xFD	; 253
 2be:	88 b9       	out	0x08, r24	; 8
 2c0:	57 c0       	rjmp	.+174    	; 0x370 <main+0x1fc>
			
		}
		else if (middle<130 &&thumb<130 && index<130){//forward
 2c2:	81 e8       	ldi	r24, 0x81	; 129
 2c4:	8e 15       	cp	r24, r14
 2c6:	f0 f0       	brcs	.+60     	; 0x304 <main+0x190>
 2c8:	8f 15       	cp	r24, r15
 2ca:	e0 f0       	brcs	.+56     	; 0x304 <main+0x190>
 2cc:	8b 15       	cp	r24, r11
 2ce:	d0 f0       	brcs	.+52     	; 0x304 <main+0x190>
			OCR2A=(4*(255-((middle +thumb+index)/3)));
 2d0:	c6 01       	movw	r24, r12
 2d2:	8e 0d       	add	r24, r14
 2d4:	91 1d       	adc	r25, r1
 2d6:	8b 0d       	add	r24, r11
 2d8:	91 1d       	adc	r25, r1
 2da:	63 e0       	ldi	r22, 0x03	; 3
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	0e 94 bc 01 	call	0x378	; 0x378 <__divmodhi4>
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	86 1b       	sub	r24, r22
 2e8:	97 0b       	sbc	r25, r23
 2ea:	88 0f       	add	r24, r24
 2ec:	88 0f       	add	r24, r24
 2ee:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			PORTC |= (1<<PINC0) ;
 2f2:	88 b1       	in	r24, 0x08	; 8
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<PINC1);
 2f8:	88 b1       	in	r24, 0x08	; 8
 2fa:	8d 7f       	andi	r24, 0xFD	; 253
 2fc:	88 b9       	out	0x08, r24	; 8
			
			OCR0B=12;
 2fe:	8c e0       	ldi	r24, 0x0C	; 12
 300:	88 bd       	out	0x28, r24	; 40
 302:	36 c0       	rjmp	.+108    	; 0x370 <main+0x1fc>

		}
		else if (middle<130 && thumb>130 && index<130){//back
 304:	91 e8       	ldi	r25, 0x81	; 129
 306:	9e 15       	cp	r25, r14
 308:	f0 f0       	brcs	.+60     	; 0x346 <main+0x1d2>
 30a:	82 e8       	ldi	r24, 0x82	; 130
 30c:	8f 15       	cp	r24, r15
 30e:	d8 f4       	brcc	.+54     	; 0x346 <main+0x1d2>
 310:	9b 15       	cp	r25, r11
 312:	c8 f0       	brcs	.+50     	; 0x346 <main+0x1d2>
			OCR2A=(4*(255-((middle +index)/3)));
 314:	8b 2d       	mov	r24, r11
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	8e 0d       	add	r24, r14
 31a:	91 1d       	adc	r25, r1
 31c:	63 e0       	ldi	r22, 0x03	; 3
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	0e 94 bc 01 	call	0x378	; 0x378 <__divmodhi4>
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	86 1b       	sub	r24, r22
 32a:	97 0b       	sbc	r25, r23
 32c:	88 0f       	add	r24, r24
 32e:	88 0f       	add	r24, r24
 330:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

			PORTC |= (1<<PINC1) ;
 334:	88 b1       	in	r24, 0x08	; 8
 336:	82 60       	ori	r24, 0x02	; 2
 338:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<PINC0);
 33a:	88 b1       	in	r24, 0x08	; 8
 33c:	8e 7f       	andi	r24, 0xFE	; 254
 33e:	88 b9       	out	0x08, r24	; 8
			OCR0B=12;
 340:	8c e0       	ldi	r24, 0x0C	; 12
 342:	88 bd       	out	0x28, r24	; 40
 344:	15 c0       	rjmp	.+42     	; 0x370 <main+0x1fc>
			
		}
		else if(thumb<130 && index >130 &&middle>130){
 346:	91 e8       	ldi	r25, 0x81	; 129
 348:	9f 15       	cp	r25, r15
 34a:	40 f0       	brcs	.+16     	; 0x35c <main+0x1e8>
 34c:	82 e8       	ldi	r24, 0x82	; 130
 34e:	8b 15       	cp	r24, r11
 350:	28 f4       	brcc	.+10     	; 0x35c <main+0x1e8>
 352:	8e 15       	cp	r24, r14
 354:	18 f4       	brcc	.+6      	; 0x35c <main+0x1e8>
			//go left

			
			OCR0B=1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	88 bd       	out	0x28, r24	; 40
 35a:	0a c0       	rjmp	.+20     	; 0x370 <main+0x1fc>
		}
		else if(thumb>130 && index <130 && middle>130){
 35c:	92 e8       	ldi	r25, 0x82	; 130
 35e:	9f 15       	cp	r25, r15
 360:	38 f4       	brcc	.+14     	; 0x370 <main+0x1fc>
 362:	81 e8       	ldi	r24, 0x81	; 129
 364:	8b 15       	cp	r24, r11
 366:	20 f0       	brcs	.+8      	; 0x370 <main+0x1fc>
 368:	9e 15       	cp	r25, r14
 36a:	10 f4       	brcc	.+4      	; 0x370 <main+0x1fc>
			//go right

			OCR0B=16;
 36c:	80 e1       	ldi	r24, 0x10	; 16
 36e:	88 bd       	out	0x28, r24	; 40
			
		}
		LCD_cmd(0x01);
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_cmd>
		
		
	}
 376:	2b cf       	rjmp	.-426    	; 0x1ce <main+0x5a>

00000378 <__divmodhi4>:
 378:	97 fb       	bst	r25, 7
 37a:	07 2e       	mov	r0, r23
 37c:	16 f4       	brtc	.+4      	; 0x382 <__divmodhi4+0xa>
 37e:	00 94       	com	r0
 380:	07 d0       	rcall	.+14     	; 0x390 <__divmodhi4_neg1>
 382:	77 fd       	sbrc	r23, 7
 384:	09 d0       	rcall	.+18     	; 0x398 <__divmodhi4_neg2>
 386:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__udivmodhi4>
 38a:	07 fc       	sbrc	r0, 7
 38c:	05 d0       	rcall	.+10     	; 0x398 <__divmodhi4_neg2>
 38e:	3e f4       	brtc	.+14     	; 0x39e <__divmodhi4_exit>

00000390 <__divmodhi4_neg1>:
 390:	90 95       	com	r25
 392:	81 95       	neg	r24
 394:	9f 4f       	sbci	r25, 0xFF	; 255
 396:	08 95       	ret

00000398 <__divmodhi4_neg2>:
 398:	70 95       	com	r23
 39a:	61 95       	neg	r22
 39c:	7f 4f       	sbci	r23, 0xFF	; 255

0000039e <__divmodhi4_exit>:
 39e:	08 95       	ret

000003a0 <__udivmodhi4>:
 3a0:	aa 1b       	sub	r26, r26
 3a2:	bb 1b       	sub	r27, r27
 3a4:	51 e1       	ldi	r21, 0x11	; 17
 3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <__udivmodhi4_ep>

000003a8 <__udivmodhi4_loop>:
 3a8:	aa 1f       	adc	r26, r26
 3aa:	bb 1f       	adc	r27, r27
 3ac:	a6 17       	cp	r26, r22
 3ae:	b7 07       	cpc	r27, r23
 3b0:	10 f0       	brcs	.+4      	; 0x3b6 <__udivmodhi4_ep>
 3b2:	a6 1b       	sub	r26, r22
 3b4:	b7 0b       	sbc	r27, r23

000003b6 <__udivmodhi4_ep>:
 3b6:	88 1f       	adc	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	5a 95       	dec	r21
 3bc:	a9 f7       	brne	.-22     	; 0x3a8 <__udivmodhi4_loop>
 3be:	80 95       	com	r24
 3c0:	90 95       	com	r25
 3c2:	bc 01       	movw	r22, r24
 3c4:	cd 01       	movw	r24, r26
 3c6:	08 95       	ret

000003c8 <itoa>:
 3c8:	45 32       	cpi	r20, 0x25	; 37
 3ca:	51 05       	cpc	r21, r1
 3cc:	20 f4       	brcc	.+8      	; 0x3d6 <itoa+0xe>
 3ce:	42 30       	cpi	r20, 0x02	; 2
 3d0:	10 f0       	brcs	.+4      	; 0x3d6 <itoa+0xe>
 3d2:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__itoa_ncheck>
 3d6:	fb 01       	movw	r30, r22
 3d8:	10 82       	st	Z, r1
 3da:	cb 01       	movw	r24, r22
 3dc:	08 95       	ret

000003de <__itoa_ncheck>:
 3de:	bb 27       	eor	r27, r27
 3e0:	4a 30       	cpi	r20, 0x0A	; 10
 3e2:	31 f4       	brne	.+12     	; 0x3f0 <__itoa_ncheck+0x12>
 3e4:	99 23       	and	r25, r25
 3e6:	22 f4       	brpl	.+8      	; 0x3f0 <__itoa_ncheck+0x12>
 3e8:	bd e2       	ldi	r27, 0x2D	; 45
 3ea:	90 95       	com	r25
 3ec:	81 95       	neg	r24
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__utoa_common>

000003f4 <__utoa_ncheck>:
 3f4:	bb 27       	eor	r27, r27

000003f6 <__utoa_common>:
 3f6:	fb 01       	movw	r30, r22
 3f8:	55 27       	eor	r21, r21
 3fa:	aa 27       	eor	r26, r26
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	aa 1f       	adc	r26, r26
 402:	a4 17       	cp	r26, r20
 404:	10 f0       	brcs	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	a4 1b       	sub	r26, r20
 408:	83 95       	inc	r24
 40a:	50 51       	subi	r21, 0x10	; 16
 40c:	b9 f7       	brne	.-18     	; 0x3fc <__utoa_common+0x6>
 40e:	a0 5d       	subi	r26, 0xD0	; 208
 410:	aa 33       	cpi	r26, 0x3A	; 58
 412:	08 f0       	brcs	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 414:	a9 5d       	subi	r26, 0xD9	; 217
 416:	a1 93       	st	Z+, r26
 418:	00 97       	sbiw	r24, 0x00	; 0
 41a:	79 f7       	brne	.-34     	; 0x3fa <__utoa_common+0x4>
 41c:	b1 11       	cpse	r27, r1
 41e:	b1 93       	st	Z+, r27
 420:	11 92       	st	Z+, r1
 422:	cb 01       	movw	r24, r22
 424:	0c 94 14 02 	jmp	0x428	; 0x428 <strrev>

00000428 <strrev>:
 428:	dc 01       	movw	r26, r24
 42a:	fc 01       	movw	r30, r24
 42c:	67 2f       	mov	r22, r23
 42e:	71 91       	ld	r23, Z+
 430:	77 23       	and	r23, r23
 432:	e1 f7       	brne	.-8      	; 0x42c <strrev+0x4>
 434:	32 97       	sbiw	r30, 0x02	; 2
 436:	04 c0       	rjmp	.+8      	; 0x440 <strrev+0x18>
 438:	7c 91       	ld	r23, X
 43a:	6d 93       	st	X+, r22
 43c:	70 83       	st	Z, r23
 43e:	62 91       	ld	r22, -Z
 440:	ae 17       	cp	r26, r30
 442:	bf 07       	cpc	r27, r31
 444:	c8 f3       	brcs	.-14     	; 0x438 <strrev+0x10>
 446:	08 95       	ret

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
